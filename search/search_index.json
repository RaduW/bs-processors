{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About This is the documentation for bs-processors, a library for processing xml/html files parsed with BeautifulSoup API The api is still 'a work in progress' and can be found at: Api documentation","title":"About"},{"location":"#about","text":"This is the documentation for bs-processors, a library for processing xml/html files parsed with BeautifulSoup","title":"About"},{"location":"#api","text":"The api is still 'a work in progress' and can be found at: Api documentation","title":"API"},{"location":"how_to/","text":"Working with bs-processors Overview ... write overview The processors TODO The predicates TODO Writing your own predicates TODO Writing your own processors TODO","title":"Working with bs-processors"},{"location":"how_to/#working-with-bs-processors","text":"","title":"Working with bs-processors"},{"location":"how_to/#overview","text":"... write overview","title":"Overview"},{"location":"how_to/#the-processors","text":"TODO","title":"The processors"},{"location":"how_to/#the-predicates","text":"TODO","title":"The predicates"},{"location":"how_to/#writing-your-own-predicates","text":"TODO","title":"Writing your own predicates"},{"location":"how_to/#writing-your-own-processors","text":"TODO","title":"Writing your own processors"},{"location":"examples/","text":"Examples Contains examples of using bs-processors .","title":"Examples"},{"location":"examples/#examples","text":"Contains examples of using bs-processors .","title":"Examples"},{"location":"examples/flatten/","text":"How to flatten TODO","title":"How to flatten"},{"location":"examples/flatten/#how-to-flatten","text":"TODO","title":"How to flatten"},{"location":"examples/remove/","text":"How to remove tags TODO","title":"How to remove tags"},{"location":"examples/remove/#how-to-remove-tags","text":"TODO","title":"How to remove tags"},{"location":"examples/transform/","text":"How to transform TODO","title":"How to transform"},{"location":"examples/transform/#how-to-transform","text":"TODO","title":"How to transform"},{"location":"examples/use_filter_proc/","text":"How to use the filter processor Overview In this example we will use the filter processor to remove unwanted tags from a sample file Let's say we have the following file that we want to clean up. The input is <!DOCTYPE html> < html > < div > First line < font id = \"not-empty\" > not empty </ font > </ div > < div > Second line < font > </ font > < span > end. </ span ></ div > </ html > We noticed that the file has some empty <font> tags that we want to remove if they do not contain any text. For that we can use the filter_factory processor. In the processor we need to pass a filter that checks if an element is a <font> element and if it is empty. Luckily we can construct this predicate from already available building blocks. The has_name_pf predicate factory can be used to check if the passed element is font and the is_empty_p can be used to check if the element is empty (contains at most white spaces). To construct our predicate we have the following code: from bs_processors import and_pf , has_name_pf , is_empty_p is_empty_font_p = and_pf ( has_name_pf ( 'font' ), is_empty_p ) After constructing the predicate all that remains is to use it with our filter from bs_processors import filter_factory filter_empty_font_proc = filter_factory ( is_empty_font_p ) Now we are ready to pass it our loaded soup and we are done def main (): print ( \"Hello from main\" ) The result is <!DOCTYPE html> < html lang = \"en\" > < div > line 1 </ div > </ html >","title":"How to use the filter processor"},{"location":"examples/use_filter_proc/#how-to-use-the-filter-processor","text":"","title":"How to use the filter processor"},{"location":"examples/use_filter_proc/#overview","text":"In this example we will use the filter processor to remove unwanted tags from a sample file Let's say we have the following file that we want to clean up.","title":"Overview"},{"location":"examples/use_filter_proc/#the-input-is","text":"<!DOCTYPE html> < html > < div > First line < font id = \"not-empty\" > not empty </ font > </ div > < div > Second line < font > </ font > < span > end. </ span ></ div > </ html > We noticed that the file has some empty <font> tags that we want to remove if they do not contain any text. For that we can use the filter_factory processor. In the processor we need to pass a filter that checks if an element is a <font> element and if it is empty. Luckily we can construct this predicate from already available building blocks. The has_name_pf predicate factory can be used to check if the passed element is font and the is_empty_p can be used to check if the element is empty (contains at most white spaces). To construct our predicate we have the following code: from bs_processors import and_pf , has_name_pf , is_empty_p is_empty_font_p = and_pf ( has_name_pf ( 'font' ), is_empty_p ) After constructing the predicate all that remains is to use it with our filter from bs_processors import filter_factory filter_empty_font_proc = filter_factory ( is_empty_font_p ) Now we are ready to pass it our loaded soup and we are done def main (): print ( \"Hello from main\" )","title":"The input is"},{"location":"examples/use_filter_proc/#the-result-is","text":"<!DOCTYPE html> < html lang = \"en\" > < div > line 1 </ div > </ html >","title":"The result is"}]}